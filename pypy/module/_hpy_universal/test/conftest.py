from pypy.tool.pytest.apptest import AppClassCollector
from pypy.module._hpy_universal.test._vendored.support import HPyTest
from pypy.module._hpy_universal.test.support import HPyAppTest

# ================================
# Customization of applevel tests
# ================================
#
# The various AppTestFoo classes are automatically collected and generated by
# make_hpy_apptest below. Additionally, it is possible to customize the body
# of the generated AppTest* classes by creating extra_AppTest* classes below

class extra_AppTestBasic:

    def test_exception_occurred(self):
        import pytest
        pytest.skip('fixme')


# it would be nice to have a generic and/or automatic way to make w_* methods
# automatically
from pypy.module._hpy_universal.test._vendored import test_argparse as _t
class extra_AppTestParseItem:
    w_make_parse_item = _t.TestParseItem.make_parse_item

class extra_AppTestArgParse:
    w_make_two_arg_add = _t.TestArgParse.make_two_arg_add

class extra_AppTestArgParseKeywords:
    w_make_two_arg_add = _t.TestArgParseKeywords.make_two_arg_add


# ========================================================================
# pytest hooks to automatically generate AppTests from HPy vendored tests
# ========================================================================

def pytest_pycollect_makeitem(collector, name, obj):
    if (collector.istestclass(obj, name) and
        issubclass(obj, HPyTest) and
        not name.startswith('App')):
        appname = make_hpy_apptest(collector, name, obj)
        return AppClassCollector(appname, parent=collector)


def make_hpy_apptest(collector, name, cls):
    """
    Automatically create HPy AppTests from the _vendored tests.
    This is more or less equivalent of doing the following:

        from pypy.module._hpy_universal.test._vendored.test_basic import TestBasic
        class AppTestBasic(HPyAppTest, TestBasic):
            spaceconfig = {'usemodules': ['_hpy_universal']}

    """
    appname = 'App' + name
    bases = (HPyAppTest, cls)
    d = dict(spaceconfig = {'usemodules': ['_hpy_universal']})
    #
    extra = globals().get('extra_' + appname)
    if extra:
        d.update(extra.__dict__)
    #
    appcls = type(appname, bases, d)
    setattr(collector.obj, appname, appcls)
    return appname
